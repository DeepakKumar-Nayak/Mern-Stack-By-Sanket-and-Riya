console.log() as per the official documentation it is not the native part of Javascipt in the official doc we cannot find that this belong
to javascript it is being provided by browsers/nodejs for debugging purpose

Variables:
-----------
Variables are used as a container in javascript where we can store our data/values and values can be 
string,numbers and other datatypes.

There are some rules how to declare a variables Like: 
    1. we cannot use special characters to declare a variable like(#,$)
    2. its good to use camalCase while declaring a variable. 
    3. we can declare variable using var, let, cont. 
    4. Vriables ka start digit se nahi ho sakhta
        var name1 = "deepak" (right)
        var 1name = "deepak" (wrong)

    5. cannot declare variables using (let, var, const) 
        let var = "name" => this is wrong

    6. we can use _ but cannot use - 
        let user_name = "deepak" (right)
        let user-name = "deepak" (wrong)

    7. Variable names are case sensitive
    8. we cannot declare a variable with keywords(if, else for, let, var, const)

Declaring a Variables:
----------------------
Javascript allow us to declare Variables in three diffrent ways like (var, let and const)
but all of them work very diffrently in javascript. 

var name = "deepak"
let name = "deepak"
const name = "deepak"

we will study later during learning scope that how all of these are work diffrently in Javascript. 

Datatype:
----------
number, string, undefined, boolean
Null : Variable declared and defined but with an empty value. let y = null;

Short Circuting in Javascipt:
------------------------------
And Operator: 
-------------
False False False
False True False
True False False 
True True True

Aggar pehla operand false hai toh dusra operand ko check nahi karega woh hamesha pehle operator ko hi return kare dega 
Aggar pehl e operand true hai then check hoga dusra kya hai jo bhi hoga dusra wohi return hoga chahe woh true ho ya false .




Or Operator:
-------------
True False True 
True True True 
False True True 
False False False

Aggar pehle operand True hai then it doesnot check the second i will return True; 
If the first operand is false then it return the second operand whether it is true or false it doenot matter. if the second is true then it will return true if the second in false then it will return false. 

Abstract Equality(!=) and Strict Abstract Equality (!==):
----------------------------------------------------------
Abstract Equality : es mein conversion hota hein for example 
    console.log("10" != 10) Yahan hamara dusra no jo right side mein hi woh convert ho jaega into string and 
    convert hone ke baad dono equal ho gaye so the answer will be False. 

    console.log("10" !== 10) this is Strict Equality operator aur yahan pe koi conversion nahi hoga and the answer will be as usual True.


Function: 
----------
Agar hame ek set of logics ko bar bar likhne ki jarurat pad rahi hai so instead of writting the sane logic 
again and again we can write that set of logics inside an function and we can call that function whenever / wherever 
we want. 

write a program to check the number is even or odd:
---------------------------------------------------
function isEvenorOdd(number){
    if(number % 2 ==0){
        console.log('The number is even',number)
    }else{
        console.log('The number is Odd')
    }
}

isEvenorOdd(20)
Points to Remember:
-------------------
20 => is called argument passing during function calling,
number => is called parameter
isEvenorOdd() => here we are defining a function . 
isEvenorOdd(20) => here we are calling a function.

// write the same program where we are returning the output
function isEvenorOdd(number){
    if(number % 2 ==0){
        return `${number} is even`
    }else{
        return `${number} is odd`
    }
}

console.log(isEvenorOdd(20)) // return kar raha hai esliye console ke ander likh raha hoon otherwise we can write like
const data = isEvenorOdd(20)
console.log(data)

. function mein manually aggar ham kuch return nahi karenge toh hame output mein undefined milega. 
function returnData(){
    let x = 30;
}

const data = returnData()
console.log(data)

aggar console kar rahe ho toh woh toh allag baat hai par aggar return nahi kar rahe manually toh milega undefined;

// writting function with default parameter: 
    aggar aap default parameter use kar rahe ho then woh pehle check karega ki kya apne koi argument pass
    kiya hai ya nahi aggar nahi kiya hai toh jo value apbe default parameter ko diya hoga wohi wala le lega 
    but aggar apne pass kiya hai toh woh wohi wala lega jo apne pass kiya hai. 

    function getData(x,y=20){
        return(x+y)
    }
    console.log(getData(10)) // 
    Output=> 30 

    function getData(x,y=20){
        return(x+y)
        // es example mein apne default bhi pass kiya hai aur argument bhi pass kiya hai y ke liye so uska pehle priority
        jo apne function call ke waqt jo argument pass kiya hai wohi wala hoga. 
    }
    console.log(getData(10,90)) // 
    Output => 100

One more Example:
-----------------
function getData(x,y=20,z){
    console.log(x) //10
    console.log(y) //20
    console.log(z) //undefined 
}
console.log(getData(10))

function getData(x,y=20,z){
    console.log(x) //10
    console.log(y) //39
    console.log(z) //undefined 
}
console.log(getData(10,39))

// so from this it is pretty clear that we have to pass value for z and we can pass after 39 but if we are not passig any value 
then yes we will get undefined for that, though we have passed a value that too a default value for y , still we have to pass value for z
there is no way that 39 will automatically go and store inside the z, we have to pass it manually.

// using rest parameter in function. 
rest parameter(...) are used during function defination and spread(...) are used during function calling.

Example:
--------
function getData(...values){
    return values
}
console.log(getData(10,20,30,40,50,60))

In Javascipt Functions are first class citizens and why lets discuss it .
    1. function can be returned from a function and function can be passed to another function. 

    Example for passing a function as an argument to another function:
    ------------------------------------------------------------------
    function getData(getinfo){
        getinfo()
        console.log('passing function as an argument to another function')
    }

    getData(function getInfo(){
        console.log('My name is "deepak"')
    })

    Example for function can be returned from another function: 
    ------------------------------------------------------------
    function outerfunction(x){
        function innerFunction(y){
            return x+y
        }
        return innerFunction(20)
    }
    console.log(outerfunction(20))

    One More Example for passing a function as an argment in another function
    --------------------------------------------------------------------------
    function greetFunction(welcome){
        welcome('Deepak','whats Your Plan for Today')
    }      

    greetFunction(function welcomeFunction(name,msg){
        console.log('hello my name is',name,msg)
    })  

